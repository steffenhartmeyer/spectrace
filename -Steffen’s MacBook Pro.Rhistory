# Calculate the number of zeros in each minute of data
zeros <- c(1,1,1,1,0,0,0,0,1,1,0,0,0,1,0,1,1,1)
# Find the start and end indices of each potential non-wear period
start_indices <- which(zeros & !dplyr::lag(zeros, default = FALSE))
end_indices <- which(zeros & !dplyr::lead(zeros, default = FALSE))
ranges <- as.numeric(matrix(rbind(start_indices, end_indices), nrow = 2))
# Remove ranges < min_length
intra_diff = diff(ranges)[1:(length(ranges)-1) %% 2 != 0] + 1
exclude_ranges = c(which(intra_diff < min_length) * 2,
which(intra_diff < min_length) * 2 - 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Combine ranges with inter-range difference <= max_interrupt
inter_diff = diff(ranges)[1:(length(ranges)-1) %% 2 == 0]-1
exclude_ranges = c(which(inter_diff <= max_interrupt) * 2,
which(inter_diff <= max_interrupt) * 2 + 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Make intervals
ranges = matrix(ranges, ncol = 2, byrow=TRUE)
intervals = matrix(ranges[which(ranges[,2]-ranges[,1] >= min_length),], ncol=2) %>%
apply(MARGIN = 1, function(x) list(x[1]:x[2])) %>% unlist()
indices = seq(1:length(x))
return(indices %in% intervals)
}
flag_clusters(zeros)
library(tidyverse)
flag_clusters(zeros)
View(ranges)
intervals = matrix(ranges[which(ranges[,2]-ranges[,1] >= min_length),], ncol=2) %>%
apply(MARGIN = 1, function(z) list(z[1]:z[2])) %>% unlist()
intervals
intervals = matrix(ranges, ncol=2) %>%
apply(MARGIN = 1, function(z) list(z[1]:z[2])) %>% unlist()
# Make intervals
ranges = matrix(ranges, ncol = 2, byrow=TRUE)
intervals = ranges %>% apply(MARGIN = 1, function(x) list(x[1]:x[2])) %>% unlist()
# Make intervals
ranges = matrix(ranges, ncol = 2, byrow=TRUE)
# Make intervals
ranges = matrix(ranges, ncol = 2, byrow=TRUE)
# Make intervals
ranges = matrix(ranges, ncol = 2, byrow=TRUE)
intervals = ranges %>% apply(MARGIN = 1, function(z) list(z[1]:z[2])) %>% unlist()
start = ranges %>% apply(MARGIN = 1, function(z) list(rep(z[1], z[2]-z[1]+1)))
View(start)
start = ranges %>% apply(MARGIN = 1, function(z) list(rep(z[1], z[2]-z[1]+1))) %>% unlist()
start = ranges %>% apply(MARGIN = 1, function(z) list(rep(z[1], z[2]-z[1]+1))) %>% rbind()
start = ranges %>% apply(MARGIN = 1, function(z) list(rep(z[1], z[2]-z[1]+1), rep(z[2], z[2]-z[1]+1)))
start = ranges %>% apply(MARGIN = 1, function(z) list(rep(z[1], z[2]-z[1]+1), rep(z[2], z[2]-z[1]+1))) %>% unlist()
start = ranges %>% apply(MARGIN = 1, function(z) data.frame(rep(z[1], z[2]-z[1]+1), rep(z[2], z[2]-z[1]+1)))
View(start)
View(start)
start = ranges %>% apply(MARGIN = 1, function(z) cbind(rep(z[1], z[2]-z[1]+1), rep(z[2], z[2]-z[1]+1)))
View(start)
start = ranges %>% apply(MARGIN = 1, function(z) unlist(rep(z[1], z[2]-z[1]+1), rep(z[2], z[2]-z[1]+1)))
View(start)
start = ranges %>% apply(MARGIN = 1, function(z) list(rep(z[1], z[2]-z[1]+1), rep(z[2], z[2]-z[1]+1)))
as.matrix(start)
ranges.df = data.frame(ranges)
View(ranges.df)
# Make intervals
ranges = matrix(ranges, ncol = 2, byrow=TRUE)
ranges.df = data.frame(ranges)
# Make intervals
ranges = matrix(ranges, ncol = 2)
# Make intervals
ranges = matrix(ranges, ncol = 2)
# Make intervals
ranges = matrix(ranges, ncol = 2, byrow = FALSE)
# Find the start and end indices of each potential non-wear period
start_indices <- which(x & !dplyr::lag(x, default = FALSE))
x = zeros
# Find the start and end indices of each potential non-wear period
start_indices <- which(x & !dplyr::lag(x, default = FALSE))
end_indices <- which(x & !dplyr::lead(x, default = FALSE))
ranges <- as.numeric(matrix(rbind(start_indices, end_indices), nrow = 2))
ranges <- as.numeric(matrix(rbind(start_indices, end_indices), nrow = 2))
# Remove ranges < min_length
intra_diff = diff(ranges)[1:(length(ranges)-1) %% 2 != 0] + 1
exclude_ranges = c(which(intra_diff < min_length) * 2,
which(intra_diff < min_length) * 2 - 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Combine ranges with inter-range difference <= max_interrupt
inter_diff = diff(ranges)[1:(length(ranges)-1) %% 2 == 0]-1
exclude_ranges = c(which(inter_diff <= max_interrupt) * 2,
which(inter_diff <= max_interrupt) * 2 + 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Make intervals
ranges2 = matrix(ranges, ncol = 2, byrow = TRUE)
View(ranges2)
intervals = ranges %>% apply(MARGIN = 1, function(z) list(z[1]:z[2])) %>% unlist()
intervals = ranges2 %>% apply(MARGIN = 1, function(z) list(z[1]:z[2])) %>% unlist()
# Make intervals
ranges2 = matrix(ranges, ncol = 2, byrow = TRUE) %>% as.data.frame()
View(ranges2)
View(ranges2)
# Make intervals
ranges2 = matrix(ranges, ncol = 2, byrow = TRUE) %>% as.data.frame() %>% setnames(c("start", "end")
intervals = ranges2 %>% apply(MARGIN = 1, function(z) list(z[1]:z[2])) %>% unlist()
# Make intervals
ranges2 = matrix(ranges, ncol = 2, byrow = TRUE) %>% as.data.frame() %>% setnames(c("start", "end"))
# Make intervals
ranges2 = matrix(ranges, ncol = 2, byrow = TRUE) %>% as.data.frame() %>% setnames(c("start", "end"))
library(tidyverse)
# Make intervals
ranges2 = matrix(ranges, ncol = 2, byrow = TRUE) %>% as.data.frame() %>% setnames(c("start", "end"))
# Make intervals
ranges2 = matrix(ranges, ncol = 2, byrow = TRUE) %>% as.data.frame() %>% set_names(c("start", "end"))
View(ranges2)
# Make intervals
ranges2 = matrix(ranges, ncol = 2, byrow = TRUE) %>%
as.data.frame() %>%
magrittr::set_names(c("start", "end"))
# Make intervals
ranges.df = matrix(ranges, ncol = 2, byrow = TRUE) %>%
as.data.frame() %>%
magrittr::set_names(c("start", "end"))
ranges.df %>%
dplyr::rowwise() %>%
dplyr::mutate(idx = list(seq(start, end))) %>%
tidyr::unnest(cols = c(idx)) %>%
dplyr::ungroup()
# Make intervals
intervals =
matrix(ranges, ncol = 2, byrow = TRUE) %>%
as.data.frame() %>%
magrittr::set_names(c("start", "end")) %>%
dplyr::mutate(invalid_cluster_idx = 1:length(.)) %>%
dplyr::rowwise() %>%
dplyr::mutate(idx = list(seq(start, end))) %>%
tidyr::unnest(cols = c(idx)) %>%
dplyr::ungroup()
View(intervals)
find_clusters = function(x, min_length, max_interrupt = 0){
# Replace NA with FALSE
x = replace_na(x, FALSE)
# Find the start and end indices of each potential non-wear period
start_indices <- which(x & !dplyr::lag(x, default = FALSE))
end_indices <- which(x & !dplyr::lead(x, default = FALSE))
ranges <- as.numeric(matrix(rbind(start_indices, end_indices), nrow = 2))
# Remove ranges < min_length
intra_diff = diff(ranges)[1:(length(ranges)-1) %% 2 != 0] + 1
exclude_ranges = c(which(intra_diff < min_length) * 2,
which(intra_diff < min_length) * 2 - 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Combine ranges with inter-range difference <= max_interrupt
inter_diff = diff(ranges)[1:(length(ranges)-1) %% 2 == 0]-1
exclude_ranges = c(which(inter_diff <= max_interrupt) * 2,
which(inter_diff <= max_interrupt) * 2 + 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Make intervals
intervals =
matrix(ranges, ncol = 2, byrow = TRUE) %>%
as.data.frame() %>%
magrittr::set_names(c("cluster_start", "cluster_end")) %>%
dplyr::mutate(cluster_idx = 1:length(.)) %>%
dplyr::rowwise() %>%
dplyr::mutate(idx = list(seq(cluster_start, cluster_end))) %>%
tidyr::unnest(cols = c(idx)) %>%
dplyr::ungroup() %>%
dplyr::mutate(in_cluster = TRUE) %>%
dplyr::relocate(idx, iscluster, cluster_idx, cluster_start, cluster_end)
return(intervals)
}
find_clusters(c(0))
find_clusters(c(0), 5, 2)
find_clusters(c(1), 5, 2)
find_clusters(c(1,1,1), 5, 2)
find_clusters(c(1,1,1,0,0,1), 5, 2)
# Make intervals
intervals =
matrix(ranges, ncol = 2, byrow = TRUE) %>%
as.data.frame() %>%
magrittr::set_names(c("cluster_start", "cluster_end")) %>%
dplyr::mutate(cluster_idx = 1:length(.)) #%>%
View(intervals)
find_clusters = function(x, min_length, max_interrupt = 0){
# Replace NA with FALSE
x = replace_na(x, FALSE)
# Find the start and end indices of each potential non-wear period
start_indices <- which(x & !dplyr::lag(x, default = FALSE))
end_indices <- which(x & !dplyr::lead(x, default = FALSE))
ranges <- as.numeric(matrix(rbind(start_indices, end_indices), nrow = 2))
# Remove ranges < min_length
intra_diff = diff(ranges)[1:(length(ranges)-1) %% 2 != 0] + 1
exclude_ranges = c(which(intra_diff < min_length) * 2,
which(intra_diff < min_length) * 2 - 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Combine ranges with inter-range difference <= max_interrupt
inter_diff = diff(ranges)[1:(length(ranges)-1) %% 2 == 0]-1
exclude_ranges = c(which(inter_diff <= max_interrupt) * 2,
which(inter_diff <= max_interrupt) * 2 + 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Make intervals
intervals =
matrix(ranges, ncol = 2, byrow = TRUE) %>%
as.data.frame() %>%
magrittr::set_names(c("cluster_start", "cluster_end")) %>%
dplyr::mutate(cluster_idx = 1:length(.)) #%>%
dplyr::rowwise() %>%
dplyr::mutate(idx = list(seq(cluster_start, cluster_end))) %>%
tidyr::unnest(cols = c(idx)) %>%
dplyr::ungroup() %>%
dplyr::mutate(in_cluster = TRUE) %>%
dplyr::relocate(idx, iscluster, cluster_idx, cluster_start, cluster_end)
return(intervals)
}
find_clusters(c(1,1,1,0,0,1), 5, 2)
find_clusters = function(x, min_length, max_interrupt = 0){
# Replace NA with FALSE
x = replace_na(x, FALSE)
# Find the start and end indices of each potential non-wear period
start_indices <- which(x & !dplyr::lag(x, default = FALSE))
end_indices <- which(x & !dplyr::lead(x, default = FALSE))
ranges <- as.numeric(matrix(rbind(start_indices, end_indices), nrow = 2))
# Remove ranges < min_length
intra_diff = diff(ranges)[1:(length(ranges)-1) %% 2 != 0] + 1
exclude_ranges = c(which(intra_diff < min_length) * 2,
which(intra_diff < min_length) * 2 - 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Combine ranges with inter-range difference <= max_interrupt
inter_diff = diff(ranges)[1:(length(ranges)-1) %% 2 == 0]-1
exclude_ranges = c(which(inter_diff <= max_interrupt) * 2,
which(inter_diff <= max_interrupt) * 2 + 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Make intervals
intervals =
matrix(ranges, ncol = 2, byrow = TRUE) %>%
as.data.frame() %>%
magrittr::set_names(c("cluster_start", "cluster_end")) %>%
dplyr::mutate(cluster_idx = ifelse(length(.) > 0, 1:length(.), NA)) %>%
dplyr::rowwise() %>%
dplyr::mutate(idx = list(seq(cluster_start, cluster_end))) %>%
tidyr::unnest(cols = c(idx)) %>%
dplyr::ungroup() %>%
dplyr::mutate(in_cluster = TRUE) %>%
dplyr::relocate(idx, iscluster, cluster_idx, cluster_start, cluster_end)
return(intervals)
}
find_clusters(c(1,1,1,0,0,1), 5, 2)
find_clusters = function(x, min_length, max_interrupt = 0){
# Replace NA with FALSE
x = replace_na(x, FALSE)
# Find the start and end indices of each potential non-wear period
start_indices <- which(x & !dplyr::lag(x, default = FALSE))
end_indices <- which(x & !dplyr::lead(x, default = FALSE))
ranges <- as.numeric(matrix(rbind(start_indices, end_indices), nrow = 2))
# Remove ranges < min_length
intra_diff = diff(ranges)[1:(length(ranges)-1) %% 2 != 0] + 1
exclude_ranges = c(which(intra_diff < min_length) * 2,
which(intra_diff < min_length) * 2 - 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Combine ranges with inter-range difference <= max_interrupt
inter_diff = diff(ranges)[1:(length(ranges)-1) %% 2 == 0]-1
exclude_ranges = c(which(inter_diff <= max_interrupt) * 2,
which(inter_diff <= max_interrupt) * 2 + 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Make intervals
if(length(ranges) > 0){
intervals =
matrix(ranges, ncol = 2, byrow = TRUE) %>%
as.data.frame() %>%
magrittr::set_names(c("cluster_start", "cluster_end")) %>%
dplyr::mutate(cluster_idx = 1:length(.)) %>%
dplyr::rowwise() %>%
dplyr::mutate(idx = list(seq(cluster_start, cluster_end))) %>%
tidyr::unnest(cols = c(idx)) %>%
dplyr::ungroup() %>%
dplyr::mutate(in_cluster = TRUE) %>%
dplyr::relocate(idx, iscluster, cluster_idx, cluster_start, cluster_end)
}
else{
intervals = NA
}
return(intervals)
}
find_clusters(c(1,1,1,0,0,1), 5, 2)
find_clusters(c(1,1,1,1,1,0,0,1), 5, 2)
exclude_ranges = c(which(inter_diff <= max_interrupt) * 2,
which(inter_diff <= max_interrupt) * 2 + 1)
find_clusters = function(x, min_length, max_interrupt = 0){
# Replace NA with FALSE
x = replace_na(x, FALSE)
# Find the start and end indices of each potential non-wear period
start_indices <- which(x & !dplyr::lag(x, default = FALSE))
end_indices <- which(x & !dplyr::lead(x, default = FALSE))
ranges <- as.numeric(matrix(rbind(start_indices, end_indices), nrow = 2))
# Remove ranges < min_length
intra_diff = diff(ranges)[1:(length(ranges)-1) %% 2 != 0] + 1
exclude_ranges = c(which(intra_diff < min_length) * 2,
which(intra_diff < min_length) * 2 - 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Combine ranges with inter-range difference <= max_interrupt
inter_diff = diff(ranges)[1:(length(ranges)-1) %% 2 == 0]-1
exclude_ranges = c(which(inter_diff <= max_interrupt) * 2,
which(inter_diff <= max_interrupt) * 2 + 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Make intervals
if(length(ranges) > 0){
intervals =
matrix(ranges, ncol = 2, byrow = TRUE) %>%
as.data.frame() %>%
magrittr::set_names(c("cluster_start", "cluster_end")) %>%
dplyr::mutate(cluster_idx = 1:length(cluster_start)) %>%
dplyr::rowwise() %>%
dplyr::mutate(idx = list(seq(cluster_start, cluster_end))) %>%
tidyr::unnest(cols = c(idx)) %>%
dplyr::ungroup() %>%
dplyr::mutate(in_cluster = TRUE) %>%
dplyr::relocate(idx, iscluster, cluster_idx, cluster_start, cluster_end)
}
else{
intervals = NA
}
return(intervals)
}
find_clusters(c(1,1,1,1,1,0,0,1), 5, 2)
find_clusters = function(x, min_length, max_interrupt = 0){
# Replace NA with FALSE
x = replace_na(x, FALSE)
# Find the start and end indices of each potential non-wear period
start_indices <- which(x & !dplyr::lag(x, default = FALSE))
end_indices <- which(x & !dplyr::lead(x, default = FALSE))
ranges <- as.numeric(matrix(rbind(start_indices, end_indices), nrow = 2))
# Remove ranges < min_length
intra_diff = diff(ranges)[1:(length(ranges)-1) %% 2 != 0] + 1
exclude_ranges = c(which(intra_diff < min_length) * 2,
which(intra_diff < min_length) * 2 - 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Combine ranges with inter-range difference <= max_interrupt
inter_diff = diff(ranges)[1:(length(ranges)-1) %% 2 == 0]-1
exclude_ranges = c(which(inter_diff <= max_interrupt) * 2,
which(inter_diff <= max_interrupt) * 2 + 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Make intervals
if(length(ranges) > 0){
intervals =
matrix(ranges, ncol = 2, byrow = TRUE) %>%
as.data.frame() %>%
magrittr::set_names(c("cluster_start", "cluster_end")) %>%
dplyr::mutate(cluster_idx = 1:length(cluster_start)) %>%
dplyr::rowwise() %>%
dplyr::mutate(idx = list(seq(cluster_start, cluster_end))) %>%
tidyr::unnest(cols = c(idx)) %>%
dplyr::ungroup() %>%
dplyr::mutate(iscluster = TRUE) %>%
dplyr::relocate(idx, iscluster, cluster_idx, cluster_start, cluster_end)
}
else{
intervals = NA
}
return(intervals)
}
find_clusters(c(1,1,1,1,1,0,0,1), 5, 2)
diff(c(1,2,3,5))
any(c(1,2,3) < 1)
any(c(1,2,3) < 0)
any(c(1,2,3) < 3)
find_clusters = function(x, min_length, max_interrupt = 0, cluster_name = "cluster"){
# Replace NA with FALSE
x = tidyr::replace_na(x, FALSE)
# Find the start and end indices of each potential non-wear period
start_indices <- which(x & !dplyr::lag(x, default = FALSE))
end_indices <- which(x & !dplyr::lead(x, default = FALSE))
ranges <- as.numeric(matrix(rbind(start_indices, end_indices), nrow = 2))
# Remove ranges < min_length
intra_diff = diff(ranges)[1:(length(ranges)-1) %% 2 != 0] + 1
exclude_ranges = c(which(intra_diff < min_length) * 2,
which(intra_diff < min_length) * 2 - 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Combine ranges with inter-range difference <= max_interrupt
inter_diff = diff(ranges)[1:(length(ranges)-1) %% 2 == 0]-1
exclude_ranges = c(which(inter_diff <= max_interrupt) * 2,
which(inter_diff <= max_interrupt) * 2 + 1)
if(length(exclude_ranges) > 0 )
ranges = ranges[-exclude_ranges]
# Make intervals
if(length(ranges) > 0){
intervals =
matrix(ranges, ncol = 2, byrow = TRUE) %>%
as.data.frame() %>%
magrittr::set_names(c("cluster_start", "cluster_end")) %>%
dplyr::mutate(cluster_idx = 1:length(cluster_start)) %>%
dplyr::rowwise() %>%
dplyr::mutate(idx = list(seq(cluster_start, cluster_end))) %>%
tidyr::unnest(cols = c(idx)) %>%
dplyr::ungroup() %>%
dplyr::mutate(iscluster = TRUE) %>%
dplyr::relocate(idx, iscluster, cluster_idx, cluster_start, cluster_end) %>%
dplyr::rename_with(~gsub("cluster", cluster_name, .x))
}
else{
intervals = NA
}
return(intervals)
}
find_clusters(c(0,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0), min_length = 2, cluster_name = "invalid")
load("./data/spectrace_responses_1nm.rda")
write_csv("spectrace_responses_1nm.csv")
write_csv(spectrace_responses_1nm,"spectrace_responses_1nm.csv")
read_csv("illuminants_1nm.csv")
i = read_csv("illuminants_1nm.csv")
plot(i$D65)
plot(i$D65, "l")
plot(i$D65, "-")
plot(i$D65, type ="-")
plot(i$D65, type ="l")
ii = spectrace::spectra_to_spectrace(i)
ii = spectrace::spectrace_to_wide(i)
ii = i
ii = ii %>% select(wl, val = D65)
iii = spectrace::spectrace_to_wide(ii)
iii = spectrace::spectrace_to_wide(ii) %>% spectrace::spectra_to_spectrace()
View(iii)
x = spectrace::spectra_to_spectrace(iii)
View(iii)
x = spectrace::spectra_to_spectrace(iii, "1 nm")
x = spectrace::spectra_to_spectrace(iii, "1nm")
debugSource("~/Library/CloudStorage/OneDrive-epfl.ch/R/Packages/spectrace/R/spectra_to_spectrace.R", echo=TRUE)
devtools::document()
usethis::use_tidy_style()
devtools::document()
devtools::document()
usethis::use_tidy_style()
remotes::install_github("steffenhartmeyer/spectrace@develop")
x =c(1,2,3)
x[x == 5]
is.empty(x[x == 5])
is_empty(x[x == 5])
is.null(x[x == 5])
x[x == 5] == 0
is.nan(x[x == 5])
dplyr::case_when?
?dplyr::case_when
dplyr::case_when(1 %in% c(1,2) ~ 45)
remotes::install_github("steffenhartmeyer/spectrace@develop")
system.file(".", "hello")
system.file("extdata")
?system.file
system.file("extdata", package = "spectrace")
system.file("extdata","example_activity.csv" package = "spectrace")
system.file("extdata","example_activity.csv", package = "spectrace")
1 %in% c(1,2)
!1 %in% c(1,2)
c(1,2) %in% c(1,2,4,5)
all(c(1,2) %in% c(1,2,4,5))
all(c(1,9) %in% c(1,2,4,5))
?reticulate::py_install()
devtools::document()
system.file("python", "autoencoder_clustering.py")
system.file("python")
system.file("extdata")
system.file("extdata", package = "spectrace")
remotes::install_github("steffenhartmeyer/spectrace@develop")
reticulate::virtualenv_exists("pySpectrace")
devtools::document()
usethis::use_tidy_style()
devtools::document()
remotes::install_github("steffenhartmeyer/spectrace@develop")
?append()
devtools::document()
devtools::document()
usethis::use_tidy_style()
usethis::use_tidy_style()
devtools::document()
usethis::use_description()
install.packages("renv")
renv::dependencies()
unique(renv::dependencies())
x = (renv::dependencies())
View(x)
View(x)
unique(x$Package)
?usethis::use_package()
devtools::document()
remotes::install_github("steffenhartmeyer/spectrace@develop")
devtools::document()
remotes::install_github("steffenhartmeyer/spectrace@develop")
remotes::install_github("steffenhartmeyer/spectrace@develop")
remotes::install_github("steffenhartmeyer/spectrace@develop")
remotes::install_github("steffenhartmeyer/spectrace@develop")
remotes::install_github("steffenhartmeyer/spectrace@develop")
devtools::document()
remotes::install_github("steffenhartmeyer/spectrace@develop")
load("~/Library/CloudStorage/OneDrive-epfl.ch/R/Packages/spectrace/data/reference_spectra_1nm.rda")
reference_spectra_1nm = reference_spectra
save(reference_spectra_1nm, file = "./data/reference_spectra_1nm.rda")
remotes::install_github("steffenhartmeyer/spectrace@develop")
remotes::install_github("steffenhartmeyer/spectrace@develop")
remotes::install_github("steffenhartmeyer/spectrace@develop")
?dplyr::slice()
devtools::document()
remotes::install_github("steffenhartmeyer/spectrace@develop")
remotes::install_github("steffenhartmeyer/spectrace@develop")
remotes::install_github("steffenhartmeyer/spectrace@develop")
remotes::install_github("steffenhartmeyer/spectrace@develop")
